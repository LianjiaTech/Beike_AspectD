parseUnit(UnmatchedToken(())
  skipErrorTokens(UnmatchedToken(())
  listener: beginCompilationUnit(main)
  syntheticPreviousToken(main)
  parseTopLevelDeclarationImpl(UnmatchedToken((), Instance of 'DirectiveContext')
    parseMetadataStar(UnmatchedToken(())
      listener: beginMetadataStar(main)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(UnmatchedToken(())
      listener: beginTopLevelMember(main)
      isReservedKeyword(()
      parseTopLevelMethod(UnmatchedToken((), null, null, UnmatchedToken((), Instance of 'NoType', null, main, false)
        listener: beginTopLevelMethod(UnmatchedToken((), null, null)
        listener: handleNoType(UnmatchedToken(())
        ensureIdentifierPotentiallyRecovered(UnmatchedToken((), topLevelFunctionDeclaration, false)
          listener: handleIdentifier(main, topLevelFunctionDeclaration)
        parseMethodTypeVar(main)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(main, main, false, MemberKind.TopLevelMethod)
          parseFormalParameters(main, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, if)
          parseStatement({)
            parseStatementX({)
              parseIfStatement({)
                listener: beginIfStatement(if)
                ensureParenthesizedCondition(if, allowCase: false)
                  parseExpressionInParenthesisRest((, allowCase: false)
                    parseExpression(()
                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                        parseUnaryExpression((, true, ConstantPatternContext.none)
                          parsePrimary((, expression, ConstantPatternContext.none)
                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                              parseSend((, expression, ConstantPatternContext.none)
                                isNextIdentifier(()
                                ensureIdentifier((, expression)
                                  listener: handleIdentifier(n, expression)
                                listener: handleNoTypeArguments(is)
                                parseArgumentsOpt(n)
                                  listener: handleNoArguments(is)
                                listener: handleSend(n, is)
                        parseIsOperatorRest(n)
                          listener: beginIsOperatorType(is)
                          computeTypeAfterIsOrAs(is)
                          listener: handleIdentifier(int, typeReference)
                          listener: handleNoTypeArguments(or)
                          listener: handleType(int, null)
                          listener: endIsOperatorType(is)
                          listener: handleIsOperator(is, null)
                          skipChainedAsIsOperators(int)
                        rewriter()
                        parsePrecedenceExpression(||, 6, true, ConstantPatternContext.none)
                          parseUnaryExpression(||, true, ConstantPatternContext.none)
                            parsePrimary(||, expression, ConstantPatternContext.none)
                              parseSend(||, expression, ConstantPatternContext.none)
                                isNextIdentifier(||)
                                ensureIdentifier(||, expression)
                                  reportRecoverableErrorWithToken(), Instance of 'Template<(Token) => Message>')
                                  rewriter()
                                parseArgumentsOpt()
                    ensureCloseParen(int, ()
                      rewriter()
                    listener: handleParenthesizedCondition((, null, null)
                listener: beginThenStatement(or)
                parseStatement())
                  parseStatementX())
                    parseExpressionStatementOrDeclarationAfterModifiers(), ), null, null, null, null)
                      looksLikeLocalFunction(or)
                      parseExpressionStatement())
                        parseExpression())
                          parsePrecedenceExpression(), 1, true, ConstantPatternContext.none)
                            parseUnaryExpression(), true, ConstantPatternContext.none)
                              parsePrimary(), expression, ConstantPatternContext.none)
                                parseSendOrFunctionLiteral(), expression, ConstantPatternContext.none)
                                  parseSend(), expression, ConstantPatternContext.none)
                                    isNextIdentifier())
                                    ensureIdentifier(), expression)
                                      listener: handleIdentifier(or, expression)
                                    listener: handleNoTypeArguments(})
                                    parseArgumentsOpt(or)
                                      listener: handleNoArguments(})
                                    listener: handleSend(or, })
                        ensureSemicolon(or)
                          reportRecoverableError(or, Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}])
                            listener: handleRecoverableError(Message[ExpectedAfterButGot, Expected ';' after this., null, {string: ;}], or, or)
                          rewriter()
                        listener: handleExpressionStatement(;)
                listener: endThenStatement(;)
                listener: endIfStatement(if, null)
          notEofOrValue(}, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(main, null, })
  listener: endTopLevelDeclaration()
  reportAllErrorTokens(UnmatchedToken(())
    listener: handleErrorToken(UnmatchedToken(())
    listener: handleRecoverableError(Message[UnmatchedToken, Can't find ')' to match '('., null, {string: ), lexeme: (}], UnmatchedToken((), UnmatchedToken(())
  listener: endCompilationUnit(1, )
