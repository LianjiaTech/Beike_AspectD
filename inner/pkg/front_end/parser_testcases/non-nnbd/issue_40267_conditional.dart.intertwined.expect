parseUnit(f)
  skipErrorTokens(f)
  listener: beginCompilationUnit(f)
  syntheticPreviousToken(f)
  parseTopLevelDeclarationImpl(, Instance of 'DirectiveContext')
    parseMetadataStar()
      listener: beginMetadataStar(f)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(f)
      isReservedKeyword(()
      parseTopLevelMethod(, null, null, , Instance of 'NoType', null, f, false)
        listener: beginTopLevelMethod(, null, null)
        listener: handleNoType()
        ensureIdentifierPotentiallyRecovered(, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(f, topLevelFunctionDeclaration)
        parseMethodTypeVar(f)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(f, f, false, MemberKind.TopLevelMethod)
          parseFormalParameters(f, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, var)
          parseStatement({)
            parseStatementX({)
              parseExpressionStatementOrDeclarationAfterModifiers(var, {, null, var, null, null)
                looksLikeLocalFunction(a)
                listener: beginMetadataStar(var)
                listener: endMetadataStar(0)
                listener: handleNoType(var)
                listener: beginVariablesDeclaration(a, null, var)
                parseVariablesDeclarationRest(var, true)
                  parseOptionallyInitializedIdentifier(var)
                    ensureIdentifier(var, localVariableDeclaration)
                      listener: handleIdentifier(a, localVariableDeclaration)
                    listener: beginInitializedIdentifier(a)
                    parseVariableInitializerOpt(a)
                      listener: handleNoVariableInitializer(a)
                    listener: endInitializedIdentifier(a)
                  parseOptionallyInitializedIdentifier(,)
                    ensureIdentifier(,, localVariableDeclaration)
                      listener: handleIdentifier(b, localVariableDeclaration)
                    listener: beginInitializedIdentifier(b)
                    parseVariableInitializerOpt(b)
                      listener: handleNoVariableInitializer(b)
                    listener: endInitializedIdentifier(b)
                  parseOptionallyInitializedIdentifier(,)
                    ensureIdentifier(,, localVariableDeclaration)
                      listener: handleIdentifier(c, localVariableDeclaration)
                    listener: beginInitializedIdentifier(c)
                    parseVariableInitializerOpt(c)
                      listener: handleNoVariableInitializer(c)
                    listener: endInitializedIdentifier(c)
                  ensureSemicolon(c)
                  listener: endVariablesDeclaration(3, ;)
          notEofOrValue(}, a)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                looksLikeLocalFunction(a)
                parseExpressionStatement(;)
                  parseExpression(;)
                    parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(;, true, ConstantPatternContext.none)
                        parsePrimary(;, expression, ConstantPatternContext.none)
                          parseSendOrFunctionLiteral(;, expression, ConstantPatternContext.none)
                            parseSend(;, expression, ConstantPatternContext.none)
                              isNextIdentifier(;)
                              ensureIdentifier(;, expression)
                                listener: handleIdentifier(a, expression)
                              listener: handleNoTypeArguments(?)
                              parseArgumentsOpt(a)
                                listener: handleNoArguments(?)
                              listener: handleSend(a, ?)
                      canParseAsConditional(?)
                        parseExpressionWithoutCascade(?)
                          parsePrecedenceExpression(?, 1, false, ConstantPatternContext.none)
                            parseUnaryExpression(?, false, ConstantPatternContext.none)
                              parsePrimary(?, expression, ConstantPatternContext.none)
                                parseLiteralListSuffix(?, null)
                                  parseExpression([)
                                    parsePrecedenceExpression([, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression([, true, ConstantPatternContext.none)
                                        parsePrimary([, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral([, expression, ConstantPatternContext.none)
                                            parseSend([, expression, ConstantPatternContext.none)
                                              isNextIdentifier([)
                                              ensureIdentifier([, expression)
                                              parseArgumentsOpt(b)
                        parseExpressionWithoutCascade(:)
                          parsePrecedenceExpression(:, 1, false, ConstantPatternContext.none)
                            parseUnaryExpression(:, false, ConstantPatternContext.none)
                              parsePrimary(:, expression, ConstantPatternContext.none)
                                parseSendOrFunctionLiteral(:, expression, ConstantPatternContext.none)
                                  parseSend(:, expression, ConstantPatternContext.none)
                                    isNextIdentifier(:)
                                    ensureIdentifier(:, expression)
                                    parseArgumentsOpt(c)
                      parseConditionalExpressionRest(a)
                        listener: beginConditionalExpression(?)
                        parseExpressionWithoutCascade(?)
                          parsePrecedenceExpression(?, 1, false, ConstantPatternContext.none)
                            parseUnaryExpression(?, false, ConstantPatternContext.none)
                              parsePrimary(?, expression, ConstantPatternContext.none)
                                listener: handleNoTypeArguments([)
                                parseLiteralListSuffix(?, null)
                                  parseExpression([)
                                    parsePrecedenceExpression([, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression([, true, ConstantPatternContext.none)
                                        parsePrimary([, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral([, expression, ConstantPatternContext.none)
                                            parseSend([, expression, ConstantPatternContext.none)
                                              isNextIdentifier([)
                                              ensureIdentifier([, expression)
                                                listener: handleIdentifier(b, expression)
                                              listener: handleNoTypeArguments(])
                                              parseArgumentsOpt(b)
                                                listener: handleNoArguments(])
                                              listener: handleSend(b, ])
                                  listener: handleLiteralList(1, [, null, ])
                        ensureColon(])
                        listener: handleConditionalExpressionColon()
                        parseExpressionWithoutCascade(:)
                          parsePrecedenceExpression(:, 1, false, ConstantPatternContext.none)
                            parseUnaryExpression(:, false, ConstantPatternContext.none)
                              parsePrimary(:, expression, ConstantPatternContext.none)
                                parseSendOrFunctionLiteral(:, expression, ConstantPatternContext.none)
                                  parseSend(:, expression, ConstantPatternContext.none)
                                    isNextIdentifier(:)
                                    ensureIdentifier(:, expression)
                                      listener: handleIdentifier(c, expression)
                                    listener: handleNoTypeArguments(;)
                                    parseArgumentsOpt(c)
                                      listener: handleNoArguments(;)
                                    listener: handleSend(c, ;)
                        listener: endConditionalExpression(?, :)
                  ensureSemicolon(c)
                  listener: handleExpressionStatement(;)
          notEofOrValue(}, a)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                looksLikeLocalFunction(a)
                parseExpressionStatement(;)
                  parseExpression(;)
                    parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(;, true, ConstantPatternContext.none)
                        parsePrimary(;, expression, ConstantPatternContext.none)
                          parseSendOrFunctionLiteral(;, expression, ConstantPatternContext.none)
                            parseSend(;, expression, ConstantPatternContext.none)
                              isNextIdentifier(;)
                              ensureIdentifier(;, expression)
                                listener: handleIdentifier(a, expression)
                              listener: handleNoTypeArguments(?)
                              parseArgumentsOpt(a)
                                listener: handleNoArguments(?)
                              listener: handleSend(a, ?)
                      canParseAsConditional(?)
                        parseExpressionWithoutCascade(?)
                          parsePrecedenceExpression(?, 1, false, ConstantPatternContext.none)
                            parseUnaryExpression(?, false, ConstantPatternContext.none)
                              parsePrimary(?, expression, ConstantPatternContext.none)
                                parseLiteralListSuffix(?, null)
                                  parseExpression([)
                                    parsePrecedenceExpression([, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression([, true, ConstantPatternContext.none)
                                        parsePrimary([, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral([, expression, ConstantPatternContext.none)
                                            parseSend([, expression, ConstantPatternContext.none)
                                              isNextIdentifier([)
                                              ensureIdentifier([, expression)
                                              parseArgumentsOpt(b)
                        parseExpressionWithoutCascade(:)
                          parsePrecedenceExpression(:, 1, false, ConstantPatternContext.none)
                            parseUnaryExpression(:, false, ConstantPatternContext.none)
                              parsePrimary(:, expression, ConstantPatternContext.none)
                                parseSendOrFunctionLiteral(:, expression, ConstantPatternContext.none)
                                  parseSend(:, expression, ConstantPatternContext.none)
                                    isNextIdentifier(:)
                                    ensureIdentifier(:, expression)
                                    parseArgumentsOpt(c)
                      parseConditionalExpressionRest(a)
                        listener: beginConditionalExpression(?)
                        parseExpressionWithoutCascade(?)
                          parsePrecedenceExpression(?, 1, false, ConstantPatternContext.none)
                            parseUnaryExpression(?, false, ConstantPatternContext.none)
                              parsePrimary(?, expression, ConstantPatternContext.none)
                                listener: handleNoTypeArguments([)
                                parseLiteralListSuffix(?, null)
                                  parseExpression([)
                                    parsePrecedenceExpression([, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression([, true, ConstantPatternContext.none)
                                        parsePrimary([, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral([, expression, ConstantPatternContext.none)
                                            parseSend([, expression, ConstantPatternContext.none)
                                              isNextIdentifier([)
                                              ensureIdentifier([, expression)
                                                listener: handleIdentifier(b, expression)
                                              listener: handleNoTypeArguments(])
                                              parseArgumentsOpt(b)
                                                listener: handleNoArguments(])
                                              listener: handleSend(b, ])
                                  listener: handleLiteralList(1, [, null, ])
                        ensureColon(])
                        listener: handleConditionalExpressionColon()
                        parseExpressionWithoutCascade(:)
                          parsePrecedenceExpression(:, 1, false, ConstantPatternContext.none)
                            parseUnaryExpression(:, false, ConstantPatternContext.none)
                              parsePrimary(:, expression, ConstantPatternContext.none)
                                parseSendOrFunctionLiteral(:, expression, ConstantPatternContext.none)
                                  parseSend(:, expression, ConstantPatternContext.none)
                                    isNextIdentifier(:)
                                    ensureIdentifier(:, expression)
                                      listener: handleIdentifier(c, expression)
                                    listener: handleNoTypeArguments(;)
                                    parseArgumentsOpt(c)
                                      listener: handleNoArguments(;)
                                    listener: handleSend(c, ;)
                        listener: endConditionalExpression(?, :)
                  ensureSemicolon(c)
                  listener: handleExpressionStatement(;)
          notEofOrValue(}, a)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                looksLikeLocalFunction(a)
                parseExpressionStatement(;)
                  parseExpression(;)
                    parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(;, true, ConstantPatternContext.none)
                        parsePrimary(;, expression, ConstantPatternContext.none)
                          parseSendOrFunctionLiteral(;, expression, ConstantPatternContext.none)
                            parseSend(;, expression, ConstantPatternContext.none)
                              isNextIdentifier(;)
                              ensureIdentifier(;, expression)
                                listener: handleIdentifier(a, expression)
                              listener: handleNoTypeArguments(?)
                              parseArgumentsOpt(a)
                                listener: handleNoArguments(?)
                              listener: handleSend(a, ?)
                      canParseAsConditional(?)
                        parseExpressionWithoutCascade(?)
                          parsePrecedenceExpression(?, 1, false, ConstantPatternContext.none)
                            parseUnaryExpression(?, false, ConstantPatternContext.none)
                              parsePrimary(?, expression, ConstantPatternContext.none)
                                parseLiteralListSuffix(?, null)
                                  parseExpression([)
                                    parsePrecedenceExpression([, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression([, true, ConstantPatternContext.none)
                                        parsePrimary([, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral([, expression, ConstantPatternContext.none)
                                            parseSend([, expression, ConstantPatternContext.none)
                                              isNextIdentifier([)
                                              ensureIdentifier([, expression)
                                              parseArgumentsOpt(b)
                            parsePrimary(., expressionContinuation, ConstantPatternContext.none)
                              parseSendOrFunctionLiteral(., expressionContinuation, ConstantPatternContext.none)
                                looksLikeFunctionBody(:)
                                parseSend(., expressionContinuation, ConstantPatternContext.none)
                                  isNextIdentifier(.)
                                  ensureIdentifier(., expressionContinuation)
                                  parseArgumentsOpt(toString)
                                    parseArguments(toString)
                                      parseArgumentsRest(()
                        parseExpressionWithoutCascade(:)
                          parsePrecedenceExpression(:, 1, false, ConstantPatternContext.none)
                            parseUnaryExpression(:, false, ConstantPatternContext.none)
                              parsePrimary(:, expression, ConstantPatternContext.none)
                                parseSendOrFunctionLiteral(:, expression, ConstantPatternContext.none)
                                  parseSend(:, expression, ConstantPatternContext.none)
                                    isNextIdentifier(:)
                                    ensureIdentifier(:, expression)
                                    parseArgumentsOpt(c)
                      parseConditionalExpressionRest(a)
                        listener: beginConditionalExpression(?)
                        parseExpressionWithoutCascade(?)
                          parsePrecedenceExpression(?, 1, false, ConstantPatternContext.none)
                            parseUnaryExpression(?, false, ConstantPatternContext.none)
                              parsePrimary(?, expression, ConstantPatternContext.none)
                                listener: handleNoTypeArguments([)
                                parseLiteralListSuffix(?, null)
                                  parseExpression([)
                                    parsePrecedenceExpression([, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression([, true, ConstantPatternContext.none)
                                        parsePrimary([, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral([, expression, ConstantPatternContext.none)
                                            parseSend([, expression, ConstantPatternContext.none)
                                              isNextIdentifier([)
                                              ensureIdentifier([, expression)
                                                listener: handleIdentifier(b, expression)
                                              listener: handleNoTypeArguments(])
                                              parseArgumentsOpt(b)
                                                listener: handleNoArguments(])
                                              listener: handleSend(b, ])
                                  listener: handleLiteralList(1, [, null, ])
                            parsePrimary(., expressionContinuation, ConstantPatternContext.none)
                              parseSendOrFunctionLiteral(., expressionContinuation, ConstantPatternContext.none)
                                looksLikeFunctionBody(:)
                                parseSend(., expressionContinuation, ConstantPatternContext.none)
                                  isNextIdentifier(.)
                                  ensureIdentifier(., expressionContinuation)
                                    listener: handleIdentifier(toString, expressionContinuation)
                                  listener: handleNoTypeArguments(()
                                  parseArgumentsOpt(toString)
                                    parseArguments(toString)
                                      parseArgumentsRest(()
                                        listener: beginArguments(()
                                        listener: endArguments(0, (, ))
                                  listener: handleSend(toString, :)
                            listener: handleEndingBinaryExpression(.)
                        ensureColon())
                        listener: handleConditionalExpressionColon()
                        parseExpressionWithoutCascade(:)
                          parsePrecedenceExpression(:, 1, false, ConstantPatternContext.none)
                            parseUnaryExpression(:, false, ConstantPatternContext.none)
                              parsePrimary(:, expression, ConstantPatternContext.none)
                                parseSendOrFunctionLiteral(:, expression, ConstantPatternContext.none)
                                  parseSend(:, expression, ConstantPatternContext.none)
                                    isNextIdentifier(:)
                                    ensureIdentifier(:, expression)
                                      listener: handleIdentifier(c, expression)
                                    listener: handleNoTypeArguments(;)
                                    parseArgumentsOpt(c)
                                      listener: handleNoArguments(;)
                                    listener: handleSend(c, ;)
                        listener: endConditionalExpression(?, :)
                  ensureSemicolon(c)
                  listener: handleExpressionStatement(;)
          notEofOrValue(}, a)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                looksLikeLocalFunction(a)
                parseExpressionStatement(;)
                  parseExpression(;)
                    parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(;, true, ConstantPatternContext.none)
                        parsePrimary(;, expression, ConstantPatternContext.none)
                          parseSendOrFunctionLiteral(;, expression, ConstantPatternContext.none)
                            parseSend(;, expression, ConstantPatternContext.none)
                              isNextIdentifier(;)
                              ensureIdentifier(;, expression)
                                listener: handleIdentifier(a, expression)
                              listener: handleNoTypeArguments(?)
                              parseArgumentsOpt(a)
                                listener: handleNoArguments(?)
                              listener: handleSend(a, ?)
                      canParseAsConditional(?)
                        parseExpressionWithoutCascade(?)
                          parsePrecedenceExpression(?, 1, false, ConstantPatternContext.none)
                            parseUnaryExpression(?, false, ConstantPatternContext.none)
                              parsePrimary(?, expression, ConstantPatternContext.none)
                                parseLiteralListSuffix(?, null)
                                  parseExpression([)
                                    parsePrecedenceExpression([, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression([, true, ConstantPatternContext.none)
                                        parsePrimary([, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral([, expression, ConstantPatternContext.none)
                                            parseSend([, expression, ConstantPatternContext.none)
                                              isNextIdentifier([)
                                              ensureIdentifier([, expression)
                                              parseArgumentsOpt(b)
                            parsePrimary(., expressionContinuation, ConstantPatternContext.none)
                              parseSendOrFunctionLiteral(., expressionContinuation, ConstantPatternContext.none)
                                looksLikeFunctionBody(:)
                                parseSend(., expressionContinuation, ConstantPatternContext.none)
                                  isNextIdentifier(.)
                                  ensureIdentifier(., expressionContinuation)
                                  parseArgumentsOpt(toString)
                                    parseArguments(toString)
                                      parseArgumentsRest(()
                        parseExpressionWithoutCascade(:)
                          parsePrecedenceExpression(:, 1, false, ConstantPatternContext.none)
                            parseUnaryExpression(:, false, ConstantPatternContext.none)
                              parsePrimary(:, expression, ConstantPatternContext.none)
                                parseSendOrFunctionLiteral(:, expression, ConstantPatternContext.none)
                                  parseSend(:, expression, ConstantPatternContext.none)
                                    isNextIdentifier(:)
                                    ensureIdentifier(:, expression)
                                    parseArgumentsOpt(c)
                      parseConditionalExpressionRest(a)
                        listener: beginConditionalExpression(?)
                        parseExpressionWithoutCascade(?)
                          parsePrecedenceExpression(?, 1, false, ConstantPatternContext.none)
                            parseUnaryExpression(?, false, ConstantPatternContext.none)
                              parsePrimary(?, expression, ConstantPatternContext.none)
                                listener: handleNoTypeArguments([)
                                parseLiteralListSuffix(?, null)
                                  parseExpression([)
                                    parsePrecedenceExpression([, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression([, true, ConstantPatternContext.none)
                                        parsePrimary([, expression, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral([, expression, ConstantPatternContext.none)
                                            parseSend([, expression, ConstantPatternContext.none)
                                              isNextIdentifier([)
                                              ensureIdentifier([, expression)
                                                listener: handleIdentifier(b, expression)
                                              listener: handleNoTypeArguments(])
                                              parseArgumentsOpt(b)
                                                listener: handleNoArguments(])
                                              listener: handleSend(b, ])
                                  listener: handleLiteralList(1, [, null, ])
                            parsePrimary(., expressionContinuation, ConstantPatternContext.none)
                              parseSendOrFunctionLiteral(., expressionContinuation, ConstantPatternContext.none)
                                looksLikeFunctionBody(:)
                                parseSend(., expressionContinuation, ConstantPatternContext.none)
                                  isNextIdentifier(.)
                                  ensureIdentifier(., expressionContinuation)
                                    listener: handleIdentifier(toString, expressionContinuation)
                                  listener: handleNoTypeArguments(()
                                  parseArgumentsOpt(toString)
                                    parseArguments(toString)
                                      parseArgumentsRest(()
                                        listener: beginArguments(()
                                        listener: endArguments(0, (, ))
                                  listener: handleSend(toString, :)
                            listener: handleEndingBinaryExpression(.)
                        ensureColon())
                        listener: handleConditionalExpressionColon()
                        parseExpressionWithoutCascade(:)
                          parsePrecedenceExpression(:, 1, false, ConstantPatternContext.none)
                            parseUnaryExpression(:, false, ConstantPatternContext.none)
                              parsePrimary(:, expression, ConstantPatternContext.none)
                                parseSendOrFunctionLiteral(:, expression, ConstantPatternContext.none)
                                  parseSend(:, expression, ConstantPatternContext.none)
                                    isNextIdentifier(:)
                                    ensureIdentifier(:, expression)
                                      listener: handleIdentifier(c, expression)
                                    listener: handleNoTypeArguments(;)
                                    parseArgumentsOpt(c)
                                      listener: handleNoArguments(;)
                                    listener: handleSend(c, ;)
                        listener: endConditionalExpression(?, :)
                  ensureSemicolon(c)
                  listener: handleExpressionStatement(;)
          notEofOrValue(}, a)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                looksLikeLocalFunction(a)
                parseExpressionStatement(;)
                  parseExpression(;)
                    parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(;, true, ConstantPatternContext.none)
                        parsePrimary(;, expression, ConstantPatternContext.none)
                          parseSendOrFunctionLiteral(;, expression, ConstantPatternContext.none)
                            parseSend(;, expression, ConstantPatternContext.none)
                              isNextIdentifier(;)
                              ensureIdentifier(;, expression)
                                listener: handleIdentifier(a, expression)
                              listener: handleNoTypeArguments(?)
                              parseArgumentsOpt(a)
                                listener: handleNoArguments(?)
                              listener: handleSend(a, ?)
                      parseConditionalExpressionRest(a)
                        listener: beginConditionalExpression(?)
                        parseExpressionWithoutCascade(?)
                          parsePrecedenceExpression(?, 1, false, ConstantPatternContext.none)
                            parseUnaryExpression(?, false, ConstantPatternContext.none)
                              parsePrimary(?, expression, ConstantPatternContext.none)
                                parseLiteralListSetMapOrFunction(?, null)
                                  listener: beginTypeArguments(<)
                                  listener: handleIdentifier(dynamic, typeReference)
                                  listener: handleNoTypeArguments(>)
                                  listener: handleType(dynamic, null)
                                  listener: endTypeArguments(1, <, >)
                                  parseLiteralListSuffix(>, null)
                                    parseExpression([)
                                      parsePrecedenceExpression([, 1, true, ConstantPatternContext.none)
                                        parseUnaryExpression([, true, ConstantPatternContext.none)
                                          parsePrimary([, expression, ConstantPatternContext.none)
                                            parseSendOrFunctionLiteral([, expression, ConstantPatternContext.none)
                                              parseSend([, expression, ConstantPatternContext.none)
                                                isNextIdentifier([)
                                                ensureIdentifier([, expression)
                                                  listener: handleIdentifier(b, expression)
                                                listener: handleNoTypeArguments(])
                                                parseArgumentsOpt(b)
                                                  listener: handleNoArguments(])
                                                listener: handleSend(b, ])
                                    listener: handleLiteralList(1, [, null, ])
                        ensureColon(])
                        listener: handleConditionalExpressionColon()
                        parseExpressionWithoutCascade(:)
                          parsePrecedenceExpression(:, 1, false, ConstantPatternContext.none)
                            parseUnaryExpression(:, false, ConstantPatternContext.none)
                              parsePrimary(:, expression, ConstantPatternContext.none)
                                parseLiteralListSetMapOrFunction(:, null)
                                  listener: beginTypeArguments(<)
                                  listener: handleIdentifier(dynamic, typeReference)
                                  listener: handleNoTypeArguments(>)
                                  listener: handleType(dynamic, null)
                                  listener: endTypeArguments(1, <, >)
                                  parseLiteralListSuffix(>, null)
                                    parseExpression([)
                                      parsePrecedenceExpression([, 1, true, ConstantPatternContext.none)
                                        parseUnaryExpression([, true, ConstantPatternContext.none)
                                          parsePrimary([, expression, ConstantPatternContext.none)
                                            parseSendOrFunctionLiteral([, expression, ConstantPatternContext.none)
                                              parseSend([, expression, ConstantPatternContext.none)
                                                isNextIdentifier([)
                                                ensureIdentifier([, expression)
                                                  listener: handleIdentifier(c, expression)
                                                listener: handleNoTypeArguments(])
                                                parseArgumentsOpt(c)
                                                  listener: handleNoArguments(])
                                                listener: handleSend(c, ])
                                    listener: handleLiteralList(1, [, null, ])
                        listener: endConditionalExpression(?, :)
                  ensureSemicolon(])
                  listener: handleExpressionStatement(;)
          notEofOrValue(}, a)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                looksLikeLocalFunction(a)
                parseExpressionStatement(;)
                  parseExpression(;)
                    parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(;, true, ConstantPatternContext.none)
                        parsePrimary(;, expression, ConstantPatternContext.none)
                          parseSendOrFunctionLiteral(;, expression, ConstantPatternContext.none)
                            parseSend(;, expression, ConstantPatternContext.none)
                              isNextIdentifier(;)
                              ensureIdentifier(;, expression)
                                listener: handleIdentifier(a, expression)
                              listener: handleNoTypeArguments(?)
                              parseArgumentsOpt(a)
                                listener: handleNoArguments(?)
                              listener: handleSend(a, ?)
                      parseConditionalExpressionRest(a)
                        listener: beginConditionalExpression(?)
                        parseExpressionWithoutCascade(?)
                          parsePrecedenceExpression(?, 1, false, ConstantPatternContext.none)
                            parseUnaryExpression(?, false, ConstantPatternContext.none)
                              parsePrimary(?, expression, ConstantPatternContext.none)
                                parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(?, ConstantPatternContext.none)
                                  parseParenthesizedExpressionOrRecordLiteral(?, null, ConstantPatternContext.none)
                                    listener: beginParenthesizedExpressionOrRecordLiteral(()
                                    parseExpression(()
                                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                        parseUnaryExpression((, true, ConstantPatternContext.none)
                                          parsePrimary((, expression, ConstantPatternContext.none)
                                            listener: handleNoTypeArguments([)
                                            parseLiteralListSuffix((, null)
                                              parseExpression([)
                                                parsePrecedenceExpression([, 1, true, ConstantPatternContext.none)
                                                  parseUnaryExpression([, true, ConstantPatternContext.none)
                                                    parsePrimary([, expression, ConstantPatternContext.none)
                                                      parseSendOrFunctionLiteral([, expression, ConstantPatternContext.none)
                                                        parseSend([, expression, ConstantPatternContext.none)
                                                          isNextIdentifier([)
                                                          ensureIdentifier([, expression)
                                                            listener: handleIdentifier(b, expression)
                                                          listener: handleNoTypeArguments(])
                                                          parseArgumentsOpt(b)
                                                            listener: handleNoArguments(])
                                                          listener: handleSend(b, ])
                                              listener: handleLiteralList(1, [, null, ])
                                    ensureCloseParen(], ()
                                    listener: endParenthesizedExpression(()
                        ensureColon())
                        listener: handleConditionalExpressionColon()
                        parseExpressionWithoutCascade(:)
                          parsePrecedenceExpression(:, 1, false, ConstantPatternContext.none)
                            parseUnaryExpression(:, false, ConstantPatternContext.none)
                              parsePrimary(:, expression, ConstantPatternContext.none)
                                parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(:, ConstantPatternContext.none)
                                  parseParenthesizedExpressionOrRecordLiteral(:, null, ConstantPatternContext.none)
                                    listener: beginParenthesizedExpressionOrRecordLiteral(()
                                    parseExpression(()
                                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                        parseUnaryExpression((, true, ConstantPatternContext.none)
                                          parsePrimary((, expression, ConstantPatternContext.none)
                                            listener: handleNoTypeArguments([)
                                            parseLiteralListSuffix((, null)
                                              parseExpression([)
                                                parsePrecedenceExpression([, 1, true, ConstantPatternContext.none)
                                                  parseUnaryExpression([, true, ConstantPatternContext.none)
                                                    parsePrimary([, expression, ConstantPatternContext.none)
                                                      parseSendOrFunctionLiteral([, expression, ConstantPatternContext.none)
                                                        parseSend([, expression, ConstantPatternContext.none)
                                                          isNextIdentifier([)
                                                          ensureIdentifier([, expression)
                                                            listener: handleIdentifier(c, expression)
                                                          listener: handleNoTypeArguments(])
                                                          parseArgumentsOpt(c)
                                                            listener: handleNoArguments(])
                                                          listener: handleSend(c, ])
                                              listener: handleLiteralList(1, [, null, ])
                                    ensureCloseParen(], ()
                                    listener: endParenthesizedExpression(()
                        listener: endConditionalExpression(?, :)
                  ensureSemicolon())
                  listener: handleExpressionStatement(;)
          notEofOrValue(}, })
          listener: endBlockFunctionBody(7, {, })
        listener: endTopLevelMethod(f, null, })
  listener: endTopLevelDeclaration()
  reportAllErrorTokens(f)
  listener: endCompilationUnit(1, )
