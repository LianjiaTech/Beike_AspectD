parseUnit(void)
  skipErrorTokens(void)
  listener: beginCompilationUnit(void)
  syntheticPreviousToken(void)
  parseTopLevelDeclarationImpl(, Instance of 'DirectiveContext')
    parseMetadataStar()
      listener: beginMetadataStar(void)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(void)
      parseTopLevelMethod(, null, null, , Instance of 'VoidType', null, foo, false)
        listener: beginTopLevelMethod(, null, null)
        listener: handleVoidKeyword(void)
        ensureIdentifierPotentiallyRecovered(void, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(foo, topLevelFunctionDeclaration)
        parseMethodTypeVar(foo)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(foo, foo, false, MemberKind.TopLevelMethod)
          parseFormalParameters(foo, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, var)
          parseStatement({)
            parseStatementX({)
              parseExpressionStatementOrDeclarationAfterModifiers(var, {, null, var, null, null)
                looksLikeLocalFunction(record1)
                listener: beginMetadataStar(var)
                listener: endMetadataStar(0)
                listener: handleNoType(var)
                listener: beginVariablesDeclaration(record1, null, var)
                parseVariablesDeclarationRest(var, true)
                  parseOptionallyInitializedIdentifier(var)
                    ensureIdentifier(var, localVariableDeclaration)
                      listener: handleIdentifier(record1, localVariableDeclaration)
                    listener: beginInitializedIdentifier(record1)
                    parseVariableInitializerOpt(record1)
                      listener: beginVariableInitializer(=)
                      parseExpression(=)
                        parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=, true, ConstantPatternContext.none)
                            parsePrimary(=, expression, ConstantPatternContext.none)
                              parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(=, ConstantPatternContext.none)
                                parseParenthesizedExpressionOrRecordLiteral(=, null, ConstantPatternContext.none)
                                  listener: beginParenthesizedExpressionOrRecordLiteral(()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseLiteralInt(()
                                            listener: handleLiteralInt(1)
                                  parseExpression(,)
                                    parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression(,, true, ConstantPatternContext.none)
                                        parsePrimary(,, expression, ConstantPatternContext.none)
                                          parseLiteralInt(,)
                                            listener: handleLiteralInt(2)
                                  ensureIdentifier(,, namedRecordFieldReference)
                                    listener: handleIdentifier(a, namedRecordFieldReference)
                                  parseExpression(:)
                                    parsePrecedenceExpression(:, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression(:, true, ConstantPatternContext.none)
                                        parsePrimary(:, expression, ConstantPatternContext.none)
                                          parseLiteralInt(:)
                                            listener: handleLiteralInt(3)
                                  listener: handleNamedRecordField(:)
                                  ensureIdentifier(,, namedRecordFieldReference)
                                    listener: handleIdentifier(b, namedRecordFieldReference)
                                  parseExpression(:)
                                    parsePrecedenceExpression(:, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression(:, true, ConstantPatternContext.none)
                                        parsePrimary(:, expression, ConstantPatternContext.none)
                                          parseLiteralInt(:)
                                            listener: handleLiteralInt(4)
                                  listener: handleNamedRecordField(:)
                                  ensureCloseParen(4, ()
                                  listener: endRecordLiteral((, 4, null)
                      listener: endVariableInitializer(=)
                    listener: endInitializedIdentifier(record1)
                  ensureSemicolon())
                  listener: endVariablesDeclaration(1, ;)
          notEofOrValue(}, var)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(var, ;, null, var, null, null)
                looksLikeLocalFunction(record2)
                listener: beginMetadataStar(var)
                listener: endMetadataStar(0)
                listener: handleNoType(var)
                listener: beginVariablesDeclaration(record2, null, var)
                parseVariablesDeclarationRest(var, true)
                  parseOptionallyInitializedIdentifier(var)
                    ensureIdentifier(var, localVariableDeclaration)
                      listener: handleIdentifier(record2, localVariableDeclaration)
                    listener: beginInitializedIdentifier(record2)
                    parseVariableInitializerOpt(record2)
                      listener: beginVariableInitializer(=)
                      parseExpression(=)
                        parsePrecedenceExpression(=, 1, true, ConstantPatternContext.none)
                          parseUnaryExpression(=, true, ConstantPatternContext.none)
                            parsePrimary(=, expression, ConstantPatternContext.none)
                              parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(=, ConstantPatternContext.none)
                                parseParenthesizedExpressionOrRecordLiteral(=, null, ConstantPatternContext.none)
                                  listener: beginParenthesizedExpressionOrRecordLiteral(()
                                  parseExpression(()
                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                        parsePrimary((, expression, ConstantPatternContext.none)
                                          parseLiteralInt(()
                                            listener: handleLiteralInt(1)
                                  ensureIdentifier(,, namedRecordFieldReference)
                                    listener: handleIdentifier(a, namedRecordFieldReference)
                                  parseExpression(:)
                                    parsePrecedenceExpression(:, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression(:, true, ConstantPatternContext.none)
                                        parsePrimary(:, expression, ConstantPatternContext.none)
                                          parseLiteralInt(:)
                                            listener: handleLiteralInt(2)
                                  listener: handleNamedRecordField(:)
                                  parseExpression(,)
                                    parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression(,, true, ConstantPatternContext.none)
                                        parsePrimary(,, expression, ConstantPatternContext.none)
                                          parseLiteralInt(,)
                                            listener: handleLiteralInt(3)
                                  ensureIdentifier(,, namedRecordFieldReference)
                                    listener: handleIdentifier(b, namedRecordFieldReference)
                                  parseExpression(:)
                                    parsePrecedenceExpression(:, 1, true, ConstantPatternContext.none)
                                      parseUnaryExpression(:, true, ConstantPatternContext.none)
                                        parsePrimary(:, expression, ConstantPatternContext.none)
                                          parseLiteralInt(:)
                                            listener: handleLiteralInt(4)
                                  listener: handleNamedRecordField(:)
                                  ensureCloseParen(4, ()
                                  listener: endRecordLiteral((, 4, null)
                      listener: endVariableInitializer(=)
                    listener: endInitializedIdentifier(record2)
                  ensureSemicolon())
                  listener: endVariablesDeclaration(1, ;)
          notEofOrValue(}, print)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                looksLikeLocalFunction(print)
                parseExpressionStatement(;)
                  parseExpression(;)
                    parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(;, true, ConstantPatternContext.none)
                        parsePrimary(;, expression, ConstantPatternContext.none)
                          parseSendOrFunctionLiteral(;, expression, ConstantPatternContext.none)
                            looksLikeFunctionBody(;)
                            parseSend(;, expression, ConstantPatternContext.none)
                              isNextIdentifier(;)
                              ensureIdentifier(;, expression)
                                listener: handleIdentifier(print, expression)
                              listener: handleNoTypeArguments(()
                              parseArgumentsOpt(print)
                                parseArguments(print)
                                  parseArgumentsRest(()
                                    listener: beginArguments(()
                                    parseExpression(()
                                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                        parseUnaryExpression((, true, ConstantPatternContext.none)
                                          parsePrimary((, expression, ConstantPatternContext.none)
                                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                              parseSend((, expression, ConstantPatternContext.none)
                                                isNextIdentifier(()
                                                ensureIdentifier((, expression)
                                                  listener: handleIdentifier(record2, expression)
                                                listener: handleNoTypeArguments(.)
                                                parseArgumentsOpt(record2)
                                                  listener: handleNoArguments(.)
                                                listener: handleSend(record2, .)
                                        parsePrimary(., expressionContinuation, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral(., expressionContinuation, ConstantPatternContext.none)
                                            parseSend(., expressionContinuation, ConstantPatternContext.none)
                                              isNextIdentifier(.)
                                              ensureIdentifier(., expressionContinuation)
                                                listener: handleIdentifier($1, expressionContinuation)
                                              listener: handleNoTypeArguments())
                                              parseArgumentsOpt($1)
                                                listener: handleNoArguments())
                                              listener: handleSend($1, ))
                                        listener: handleEndingBinaryExpression(.)
                                    listener: endArguments(1, (, ))
                              listener: handleSend(print, ;)
                  ensureSemicolon())
                  listener: handleExpressionStatement(;)
          notEofOrValue(}, print)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                looksLikeLocalFunction(print)
                parseExpressionStatement(;)
                  parseExpression(;)
                    parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(;, true, ConstantPatternContext.none)
                        parsePrimary(;, expression, ConstantPatternContext.none)
                          parseSendOrFunctionLiteral(;, expression, ConstantPatternContext.none)
                            looksLikeFunctionBody(;)
                            parseSend(;, expression, ConstantPatternContext.none)
                              isNextIdentifier(;)
                              ensureIdentifier(;, expression)
                                listener: handleIdentifier(print, expression)
                              listener: handleNoTypeArguments(()
                              parseArgumentsOpt(print)
                                parseArguments(print)
                                  parseArgumentsRest(()
                                    listener: beginArguments(()
                                    parseExpression(()
                                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                        parseUnaryExpression((, true, ConstantPatternContext.none)
                                          parsePrimary((, expression, ConstantPatternContext.none)
                                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                              parseSend((, expression, ConstantPatternContext.none)
                                                isNextIdentifier(()
                                                ensureIdentifier((, expression)
                                                  listener: handleIdentifier(record2, expression)
                                                listener: handleNoTypeArguments(.)
                                                parseArgumentsOpt(record2)
                                                  listener: handleNoArguments(.)
                                                listener: handleSend(record2, .)
                                        parsePrimary(., expressionContinuation, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral(., expressionContinuation, ConstantPatternContext.none)
                                            parseSend(., expressionContinuation, ConstantPatternContext.none)
                                              isNextIdentifier(.)
                                              ensureIdentifier(., expressionContinuation)
                                                listener: handleIdentifier(a, expressionContinuation)
                                              listener: handleNoTypeArguments())
                                              parseArgumentsOpt(a)
                                                listener: handleNoArguments())
                                              listener: handleSend(a, ))
                                        listener: handleEndingBinaryExpression(.)
                                    listener: endArguments(1, (, ))
                              listener: handleSend(print, ;)
                  ensureSemicolon())
                  listener: handleExpressionStatement(;)
          notEofOrValue(}, print)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                looksLikeLocalFunction(print)
                parseExpressionStatement(;)
                  parseExpression(;)
                    parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(;, true, ConstantPatternContext.none)
                        parsePrimary(;, expression, ConstantPatternContext.none)
                          parseSendOrFunctionLiteral(;, expression, ConstantPatternContext.none)
                            looksLikeFunctionBody(;)
                            parseSend(;, expression, ConstantPatternContext.none)
                              isNextIdentifier(;)
                              ensureIdentifier(;, expression)
                                listener: handleIdentifier(print, expression)
                              listener: handleNoTypeArguments(()
                              parseArgumentsOpt(print)
                                parseArguments(print)
                                  parseArgumentsRest(()
                                    listener: beginArguments(()
                                    parseExpression(()
                                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                        parseUnaryExpression((, true, ConstantPatternContext.none)
                                          parsePrimary((, expression, ConstantPatternContext.none)
                                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                              parseSend((, expression, ConstantPatternContext.none)
                                                isNextIdentifier(()
                                                ensureIdentifier((, expression)
                                                  listener: handleIdentifier(record2, expression)
                                                listener: handleNoTypeArguments(.)
                                                parseArgumentsOpt(record2)
                                                  listener: handleNoArguments(.)
                                                listener: handleSend(record2, .)
                                        parsePrimary(., expressionContinuation, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral(., expressionContinuation, ConstantPatternContext.none)
                                            parseSend(., expressionContinuation, ConstantPatternContext.none)
                                              isNextIdentifier(.)
                                              ensureIdentifier(., expressionContinuation)
                                                listener: handleIdentifier($2, expressionContinuation)
                                              listener: handleNoTypeArguments())
                                              parseArgumentsOpt($2)
                                                listener: handleNoArguments())
                                              listener: handleSend($2, ))
                                        listener: handleEndingBinaryExpression(.)
                                    listener: endArguments(1, (, ))
                              listener: handleSend(print, ;)
                  ensureSemicolon())
                  listener: handleExpressionStatement(;)
          notEofOrValue(}, print)
          parseStatement(;)
            parseStatementX(;)
              parseExpressionStatementOrDeclarationAfterModifiers(;, ;, null, null, null, null)
                looksLikeLocalFunction(print)
                parseExpressionStatement(;)
                  parseExpression(;)
                    parsePrecedenceExpression(;, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression(;, true, ConstantPatternContext.none)
                        parsePrimary(;, expression, ConstantPatternContext.none)
                          parseSendOrFunctionLiteral(;, expression, ConstantPatternContext.none)
                            looksLikeFunctionBody(;)
                            parseSend(;, expression, ConstantPatternContext.none)
                              isNextIdentifier(;)
                              ensureIdentifier(;, expression)
                                listener: handleIdentifier(print, expression)
                              listener: handleNoTypeArguments(()
                              parseArgumentsOpt(print)
                                parseArguments(print)
                                  parseArgumentsRest(()
                                    listener: beginArguments(()
                                    parseExpression(()
                                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                        parseUnaryExpression((, true, ConstantPatternContext.none)
                                          parsePrimary((, expression, ConstantPatternContext.none)
                                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                              parseSend((, expression, ConstantPatternContext.none)
                                                isNextIdentifier(()
                                                ensureIdentifier((, expression)
                                                  listener: handleIdentifier(record2, expression)
                                                listener: handleNoTypeArguments(.)
                                                parseArgumentsOpt(record2)
                                                  listener: handleNoArguments(.)
                                                listener: handleSend(record2, .)
                                        parsePrimary(., expressionContinuation, ConstantPatternContext.none)
                                          parseSendOrFunctionLiteral(., expressionContinuation, ConstantPatternContext.none)
                                            parseSend(., expressionContinuation, ConstantPatternContext.none)
                                              isNextIdentifier(.)
                                              ensureIdentifier(., expressionContinuation)
                                                listener: handleIdentifier(b, expressionContinuation)
                                              listener: handleNoTypeArguments())
                                              parseArgumentsOpt(b)
                                                listener: handleNoArguments())
                                              listener: handleSend(b, ))
                                        listener: handleEndingBinaryExpression(.)
                                    listener: endArguments(1, (, ))
                              listener: handleSend(print, ;)
                  ensureSemicolon())
                  listener: handleExpressionStatement(;)
          notEofOrValue(}, })
          listener: endBlockFunctionBody(6, {, })
        listener: endTopLevelMethod(void, null, })
  listener: endTopLevelDeclaration()
  reportAllErrorTokens(void)
  listener: endCompilationUnit(1, )
