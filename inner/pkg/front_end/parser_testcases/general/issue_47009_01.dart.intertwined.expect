parseUnit(main)
  skipErrorTokens(main)
  listener: beginCompilationUnit(main)
  syntheticPreviousToken(main)
  parseTopLevelDeclarationImpl(, Instance of 'DirectiveContext')
    parseMetadataStar()
      listener: beginMetadataStar(main)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(main)
      isReservedKeyword(()
      parseTopLevelMethod(, null, null, , Instance of 'NoType', null, main, false)
        listener: beginTopLevelMethod(, null, null)
        listener: handleNoType()
        ensureIdentifierPotentiallyRecovered(, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(main, topLevelFunctionDeclaration)
        parseMethodTypeVar(main)
          listener: handleNoTypeVariables(()
        parseGetterOrFormalParameters(main, main, false, MemberKind.TopLevelMethod)
          parseFormalParameters(main, MemberKind.TopLevelMethod)
            parseFormalParametersRest((, MemberKind.TopLevelMethod)
              listener: beginFormalParameters((, MemberKind.TopLevelMethod)
              listener: endFormalParameters(0, (, ), MemberKind.TopLevelMethod)
        parseAsyncModifierOpt())
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        parseFunctionBody(), false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, a)
          parseStatement({)
            parseStatementX({)
              parseExpressionStatementOrDeclarationAfterModifiers({, {, null, null, null, null)
                looksLikeLocalFunction(a)
                parseExpressionStatement({)
                  parseExpression({)
                    parsePrecedenceExpression({, 1, true, ConstantPatternContext.none)
                      parseUnaryExpression({, true, ConstantPatternContext.none)
                        parsePrimary({, expression, ConstantPatternContext.none)
                          parseSendOrFunctionLiteral({, expression, ConstantPatternContext.none)
                            looksLikeFunctionBody(;)
                            parseSend({, expression, ConstantPatternContext.none)
                              isNextIdentifier({)
                              ensureIdentifier({, expression)
                                listener: handleIdentifier(a, expression)
                              listener: handleNoTypeArguments(()
                              parseArgumentsOpt(a)
                                parseArguments(a)
                                  parseArgumentsRest(()
                                    listener: beginArguments(()
                                    parseExpression(()
                                      parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                        parseUnaryExpression((, true, ConstantPatternContext.none)
                                          parsePrimary((, expression, ConstantPatternContext.none)
                                            parseSendOrFunctionLiteral((, expression, ConstantPatternContext.none)
                                              looksLikeFunctionBody())
                                              parseSend((, expression, ConstantPatternContext.none)
                                                isNextIdentifier(()
                                                ensureIdentifier((, expression)
                                                  listener: handleIdentifier(b, expression)
                                                listener: handleNoTypeArguments(<)
                                                parseArgumentsOpt(b)
                                                  listener: handleNoArguments(<)
                                                listener: handleSend(b, <)
                                        listener: beginBinaryExpression(<)
                                        parsePrecedenceExpression(<, 9, true, ConstantPatternContext.none)
                                          parseUnaryExpression(<, true, ConstantPatternContext.none)
                                            parsePrimary(<, expression, ConstantPatternContext.none)
                                              parseSendOrFunctionLiteral(<, expression, ConstantPatternContext.none)
                                                parseSend(<, expression, ConstantPatternContext.none)
                                                  isNextIdentifier(<)
                                                  ensureIdentifier(<, expression)
                                                    listener: handleIdentifier(c, expression)
                                                  listener: handleNoTypeArguments(,)
                                                  parseArgumentsOpt(c)
                                                    listener: handleNoArguments(,)
                                                  listener: handleSend(c, ,)
                                        listener: endBinaryExpression(<)
                                    parseExpression(,)
                                      parsePrecedenceExpression(,, 1, true, ConstantPatternContext.none)
                                        parseUnaryExpression(,, true, ConstantPatternContext.none)
                                          parsePrimary(,, expression, ConstantPatternContext.none)
                                            inPlainSync()
                                            parseSendOrFunctionLiteral(,, expression, ConstantPatternContext.none)
                                              parseSend(,, expression, ConstantPatternContext.none)
                                                isNextIdentifier(,)
                                                ensureIdentifier(,, expression)
                                                  inPlainSync()
                                                  listener: handleIdentifier(as, expression)
                                                listener: handleNoTypeArguments(>)
                                                parseArgumentsOpt(as)
                                                  listener: handleNoArguments(>)
                                                listener: handleSend(as, >)
                                        listener: beginBinaryExpression(>)
                                        parsePrecedenceExpression(>, 9, true, ConstantPatternContext.none)
                                          parseUnaryExpression(>, true, ConstantPatternContext.none)
                                            parsePrimary(>, expression, ConstantPatternContext.none)
                                              parseParenthesizedExpressionFunctionLiteralOrRecordLiteral(>, ConstantPatternContext.none)
                                                parseParenthesizedExpressionOrRecordLiteral(>, null, ConstantPatternContext.none)
                                                  listener: beginParenthesizedExpressionOrRecordLiteral(()
                                                  parseExpression(()
                                                    parsePrecedenceExpression((, 1, true, ConstantPatternContext.none)
                                                      parseUnaryExpression((, true, ConstantPatternContext.none)
                                                        parsePrimary((, expression, ConstantPatternContext.none)
                                                          parseLiteralInt(()
                                                            listener: handleLiteralInt(1)
                                                  ensureCloseParen(1, ()
                                                  listener: endParenthesizedExpression(()
                                        listener: endBinaryExpression(>)
                                    listener: endArguments(2, (, ))
                              listener: handleSend(a, ;)
                  ensureSemicolon())
                  listener: handleExpressionStatement(;)
          notEofOrValue(}, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(main, null, })
  listener: endTopLevelDeclaration()
  reportAllErrorTokens(main)
  listener: endCompilationUnit(1, )
