parseUnit(dynamic)
  skipErrorTokens(dynamic)
  listener: beginCompilationUnit(dynamic)
  syntheticPreviousToken(dynamic)
  parseTopLevelDeclarationImpl(, Instance of 'DirectiveContext')
    parseMetadataStar()
      listener: beginMetadataStar(dynamic)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl()
      listener: beginTopLevelMember(dynamic)
      parseTopLevelMethod(, null, null, , Instance of 'SimpleType', get, get, false)
        listener: beginTopLevelMethod(, null, null)
        listener: handleIdentifier(dynamic, typeReference)
        listener: handleNoTypeArguments(get)
        listener: handleType(dynamic, null)
        ensureIdentifierPotentiallyRecovered(get, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(get, topLevelFunctionDeclaration)
        listener: handleNoTypeVariables(=>)
        parseGetterOrFormalParameters(get, get, true, MemberKind.TopLevelMethod)
          listener: handleNoFormalParameters(=>, MemberKind.TopLevelMethod)
        parseAsyncModifierOpt(get)
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        inPlainSync()
        parseFunctionBody(get, false, false)
          parseExpressionFunctionBody(=>, false)
            parseExpression(=>)
              parseThrowExpression(=>, true)
                parseExpression(throw)
                  parsePrecedenceExpression(throw, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(throw, true, ConstantPatternContext.none)
                      parsePrimary(throw, expression, ConstantPatternContext.none)
                        parseLiteralString(throw)
                          parseSingleLiteralString(throw)
                            listener: beginLiteralString("hello")
                            listener: endLiteralString(0, ;)
                listener: handleThrowExpression(throw, ;)
            ensureSemicolon("hello")
            listener: handleExpressionFunctionBody(=>, ;)
            inGenerator()
        listener: endTopLevelMethod(dynamic, get, ;)
  listener: endTopLevelDeclaration(dynamic)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(dynamic)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(dynamic)
      parseTopLevelMethod(;, null, null, ;, Instance of 'SimpleType', get, get, false)
        listener: beginTopLevelMethod(;, null, null)
        listener: handleIdentifier(dynamic, typeReference)
        listener: handleNoTypeArguments(get)
        listener: handleType(dynamic, null)
        ensureIdentifierPotentiallyRecovered(get, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(get, topLevelFunctionDeclaration)
        listener: handleNoTypeVariables({)
        parseGetterOrFormalParameters(get, get, true, MemberKind.TopLevelMethod)
          listener: handleNoFormalParameters({, MemberKind.TopLevelMethod)
        parseAsyncModifierOpt(get)
          listener: handleAsyncModifier(null, null)
          inPlainSync()
        inPlainSync()
        parseFunctionBody(get, false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, throw)
          parseStatement({)
            parseStatementX({)
              parseExpressionStatementOrDeclaration({, null)
                parseExpressionStatementOrDeclarationAfterModifiers({, {, null, null, null, null)
                  looksLikeLocalFunction(throw)
                  parseExpressionStatement({)
                    parseExpression({)
                      parseThrowExpression({, true)
                        parseExpression(throw)
                          parsePrecedenceExpression(throw, 1, true, ConstantPatternContext.none)
                            parseUnaryExpression(throw, true, ConstantPatternContext.none)
                              parsePrimary(throw, expression, ConstantPatternContext.none)
                                parseLiteralString(throw)
                                  parseSingleLiteralString(throw)
                                    listener: beginLiteralString("hello")
                                    listener: endLiteralString(0, ;)
                        listener: handleThrowExpression(throw, ;)
                    ensureSemicolon("hello")
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(dynamic, get, })
  listener: endTopLevelDeclaration(dynamic)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(dynamic)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(dynamic)
      parseTopLevelMethod(}, null, null, }, Instance of 'SimpleType', get, get, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(dynamic, typeReference)
        listener: handleNoTypeArguments(get)
        listener: handleType(dynamic, null)
        ensureIdentifierPotentiallyRecovered(get, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(get, topLevelFunctionDeclaration)
        listener: handleNoTypeVariables(async)
        parseGetterOrFormalParameters(get, get, true, MemberKind.TopLevelMethod)
          listener: handleNoFormalParameters(async, MemberKind.TopLevelMethod)
        parseAsyncModifierOpt(get)
          listener: handleAsyncModifier(async, null)
          inPlainSync()
        inPlainSync()
        parseFunctionBody(async, false, false)
          parseExpressionFunctionBody(=>, false)
            parseExpression(=>)
              parseThrowExpression(=>, true)
                parseExpression(throw)
                  parsePrecedenceExpression(throw, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(throw, true, ConstantPatternContext.none)
                      parsePrimary(throw, expression, ConstantPatternContext.none)
                        parseLiteralString(throw)
                          parseSingleLiteralString(throw)
                            listener: beginLiteralString("hello")
                            listener: endLiteralString(0, ;)
                listener: handleThrowExpression(throw, ;)
            ensureSemicolon("hello")
            listener: handleExpressionFunctionBody(=>, ;)
            inGenerator()
        listener: endTopLevelMethod(dynamic, get, ;)
  listener: endTopLevelDeclaration(dynamic)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(dynamic)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(dynamic)
      parseTopLevelMethod(;, null, null, ;, Instance of 'SimpleType', get, get, false)
        listener: beginTopLevelMethod(;, null, null)
        listener: handleIdentifier(dynamic, typeReference)
        listener: handleNoTypeArguments(get)
        listener: handleType(dynamic, null)
        ensureIdentifierPotentiallyRecovered(get, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(get, topLevelFunctionDeclaration)
        listener: handleNoTypeVariables(async)
        parseGetterOrFormalParameters(get, get, true, MemberKind.TopLevelMethod)
          listener: handleNoFormalParameters(async, MemberKind.TopLevelMethod)
        parseAsyncModifierOpt(get)
          listener: handleAsyncModifier(async, null)
          inPlainSync()
        inPlainSync()
        parseFunctionBody(async, false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, throw)
          parseStatement({)
            parseStatementX({)
              parseExpressionStatementOrDeclaration({, null)
                parseExpressionStatementOrDeclarationAfterModifiers({, {, null, null, null, null)
                  looksLikeLocalFunction(throw)
                  parseExpressionStatement({)
                    parseExpression({)
                      parseThrowExpression({, true)
                        parseExpression(throw)
                          parsePrecedenceExpression(throw, 1, true, ConstantPatternContext.none)
                            parseUnaryExpression(throw, true, ConstantPatternContext.none)
                              parsePrimary(throw, expression, ConstantPatternContext.none)
                                parseLiteralString(throw)
                                  parseSingleLiteralString(throw)
                                    listener: beginLiteralString("hello")
                                    listener: endLiteralString(0, ;)
                        listener: handleThrowExpression(throw, ;)
                    ensureSemicolon("hello")
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(dynamic, get, })
  listener: endTopLevelDeclaration(dynamic)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(dynamic)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(dynamic)
      parseTopLevelMethod(}, null, null, }, Instance of 'SimpleType', get, get, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(dynamic, typeReference)
        listener: handleNoTypeArguments(get)
        listener: handleType(dynamic, null)
        ensureIdentifierPotentiallyRecovered(get, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(get, topLevelFunctionDeclaration)
        listener: handleNoTypeVariables(async)
        parseGetterOrFormalParameters(get, get, true, MemberKind.TopLevelMethod)
          listener: handleNoFormalParameters(async, MemberKind.TopLevelMethod)
        parseAsyncModifierOpt(get)
          listener: handleAsyncModifier(async, *)
          inPlainSync()
        inPlainSync()
        parseFunctionBody(*, false, false)
          parseExpressionFunctionBody(=>, false)
            parseExpression(=>)
              parseThrowExpression(=>, true)
                parseExpression(throw)
                  parsePrecedenceExpression(throw, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(throw, true, ConstantPatternContext.none)
                      parsePrimary(throw, expression, ConstantPatternContext.none)
                        parseLiteralString(throw)
                          parseSingleLiteralString(throw)
                            listener: beginLiteralString("hello")
                            listener: endLiteralString(0, ;)
                listener: handleThrowExpression(throw, ;)
            ensureSemicolon("hello")
            listener: handleExpressionFunctionBody(=>, ;)
            inGenerator()
            listener: handleInvalidStatement(=>, GeneratorReturnsValue)
        listener: endTopLevelMethod(dynamic, get, ;)
  listener: endTopLevelDeclaration(dynamic)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(dynamic)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(dynamic)
      parseTopLevelMethod(;, null, null, ;, Instance of 'SimpleType', get, get, false)
        listener: beginTopLevelMethod(;, null, null)
        listener: handleIdentifier(dynamic, typeReference)
        listener: handleNoTypeArguments(get)
        listener: handleType(dynamic, null)
        ensureIdentifierPotentiallyRecovered(get, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(get, topLevelFunctionDeclaration)
        listener: handleNoTypeVariables(async)
        parseGetterOrFormalParameters(get, get, true, MemberKind.TopLevelMethod)
          listener: handleNoFormalParameters(async, MemberKind.TopLevelMethod)
        parseAsyncModifierOpt(get)
          listener: handleAsyncModifier(async, *)
          inPlainSync()
        inPlainSync()
        parseFunctionBody(*, false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, throw)
          parseStatement({)
            parseStatementX({)
              parseExpressionStatementOrDeclaration({, null)
                parseExpressionStatementOrDeclarationAfterModifiers({, {, null, null, null, null)
                  looksLikeLocalFunction(throw)
                  parseExpressionStatement({)
                    parseExpression({)
                      parseThrowExpression({, true)
                        parseExpression(throw)
                          parsePrecedenceExpression(throw, 1, true, ConstantPatternContext.none)
                            parseUnaryExpression(throw, true, ConstantPatternContext.none)
                              parsePrimary(throw, expression, ConstantPatternContext.none)
                                parseLiteralString(throw)
                                  parseSingleLiteralString(throw)
                                    listener: beginLiteralString("hello")
                                    listener: endLiteralString(0, ;)
                        listener: handleThrowExpression(throw, ;)
                    ensureSemicolon("hello")
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(dynamic, get, })
  listener: endTopLevelDeclaration(dynamic)
  parseTopLevelDeclarationImpl(}, Instance of 'DirectiveContext')
    parseMetadataStar(})
      listener: beginMetadataStar(dynamic)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(})
      listener: beginTopLevelMember(dynamic)
      parseTopLevelMethod(}, null, null, }, Instance of 'SimpleType', get, get, false)
        listener: beginTopLevelMethod(}, null, null)
        listener: handleIdentifier(dynamic, typeReference)
        listener: handleNoTypeArguments(get)
        listener: handleType(dynamic, null)
        ensureIdentifierPotentiallyRecovered(get, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(get, topLevelFunctionDeclaration)
        listener: handleNoTypeVariables(sync)
        parseGetterOrFormalParameters(get, get, true, MemberKind.TopLevelMethod)
          listener: handleNoFormalParameters(sync, MemberKind.TopLevelMethod)
        parseAsyncModifierOpt(get)
          listener: handleAsyncModifier(sync, *)
          inPlainSync()
        inPlainSync()
        parseFunctionBody(*, false, false)
          parseExpressionFunctionBody(=>, false)
            parseExpression(=>)
              parseThrowExpression(=>, true)
                parseExpression(throw)
                  parsePrecedenceExpression(throw, 1, true, ConstantPatternContext.none)
                    parseUnaryExpression(throw, true, ConstantPatternContext.none)
                      parsePrimary(throw, expression, ConstantPatternContext.none)
                        parseLiteralString(throw)
                          parseSingleLiteralString(throw)
                            listener: beginLiteralString("hello")
                            listener: endLiteralString(0, ;)
                listener: handleThrowExpression(throw, ;)
            ensureSemicolon("hello")
            listener: handleExpressionFunctionBody(=>, ;)
            inGenerator()
            listener: handleInvalidStatement(=>, GeneratorReturnsValue)
        listener: endTopLevelMethod(dynamic, get, ;)
  listener: endTopLevelDeclaration(dynamic)
  parseTopLevelDeclarationImpl(;, Instance of 'DirectiveContext')
    parseMetadataStar(;)
      listener: beginMetadataStar(dynamic)
      listener: endMetadataStar(0)
    parseTopLevelMemberImpl(;)
      listener: beginTopLevelMember(dynamic)
      parseTopLevelMethod(;, null, null, ;, Instance of 'SimpleType', get, get, false)
        listener: beginTopLevelMethod(;, null, null)
        listener: handleIdentifier(dynamic, typeReference)
        listener: handleNoTypeArguments(get)
        listener: handleType(dynamic, null)
        ensureIdentifierPotentiallyRecovered(get, topLevelFunctionDeclaration, false)
          listener: handleIdentifier(get, topLevelFunctionDeclaration)
        listener: handleNoTypeVariables(sync)
        parseGetterOrFormalParameters(get, get, true, MemberKind.TopLevelMethod)
          listener: handleNoFormalParameters(sync, MemberKind.TopLevelMethod)
        parseAsyncModifierOpt(get)
          listener: handleAsyncModifier(sync, *)
          inPlainSync()
        inPlainSync()
        parseFunctionBody(*, false, false)
          listener: beginBlockFunctionBody({)
          notEofOrValue(}, throw)
          parseStatement({)
            parseStatementX({)
              parseExpressionStatementOrDeclaration({, null)
                parseExpressionStatementOrDeclarationAfterModifiers({, {, null, null, null, null)
                  looksLikeLocalFunction(throw)
                  parseExpressionStatement({)
                    parseExpression({)
                      parseThrowExpression({, true)
                        parseExpression(throw)
                          parsePrecedenceExpression(throw, 1, true, ConstantPatternContext.none)
                            parseUnaryExpression(throw, true, ConstantPatternContext.none)
                              parsePrimary(throw, expression, ConstantPatternContext.none)
                                parseLiteralString(throw)
                                  parseSingleLiteralString(throw)
                                    listener: beginLiteralString("hello")
                                    listener: endLiteralString(0, ;)
                        listener: handleThrowExpression(throw, ;)
                    ensureSemicolon("hello")
                    listener: handleExpressionStatement(;)
          notEofOrValue(}, })
          listener: endBlockFunctionBody(1, {, })
        listener: endTopLevelMethod(dynamic, get, })
  listener: endTopLevelDeclaration()
  reportAllErrorTokens(dynamic)
  listener: endCompilationUnit(8, )
