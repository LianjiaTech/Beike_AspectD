library test /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

class Index extends core::Object {
  synthetic constructor •() → self::Index
    : super core::Object::•()
    ;
}
class A extends core::Object {
  synthetic constructor •() → self::A
    : super core::Object::•()
    ;
}
class B extends self::A {
  synthetic constructor •() → self::B
    : super self::A::•()
    ;
  operator +(self::C v) → self::B
    return throw "";
  operator -(core::int i) → self::B
    return throw "";
  operator *(self::B v) → self::B
    return throw "";
  operator &(self::A v) → self::C
    return throw "";
}
class C extends self::B {
  synthetic constructor •() → self::C
    : super self::B::•()
    ;
}
class Base extends core::Object {
  synthetic constructor •() → self::Base
    : super core::Object::•()
    ;
  operator [](self::Index i) → self::B
    return throw "";
  operator []=(self::Index i, self::B v) → void {}
}
class Test extends self::Base {
  synthetic constructor •() → self::Test
    : super self::Base::•()
    ;
  method test() → void {
    super.{self::Base::[]=}(self::f<self::Index>(), self::f<self::B>());
    let final self::Index #t1 = self::f<self::Index>() in super.{self::Base::[]=}(#t1, super.{self::Base::[]}(#t1).{self::B::+}(self::f<self::C>()){(self::C) → self::B});
    let final self::Index #t2 = self::f<self::Index>() in super.{self::Base::[]=}(#t2, super.{self::Base::[]}(#t2).{self::B::*}(self::f<self::B>()){(self::B) → self::B});
    let final self::Index #t3 = self::f<self::Index>() in super.{self::Base::[]=}(#t3, super.{self::Base::[]}(#t3).{self::B::&}(self::f<self::A>()){(self::A) → self::C});
    let final self::Index #t4 = self::f<self::Index>() in let final self::B #t5 = super.{self::Base::[]}(#t4).{self::B::-}(1){(core::int) → self::B} in let final void #t6 = super.{self::Base::[]=}(#t4, #t5) in #t5;
    let final self::Index #t7 = self::f<self::Index>() in super.{self::Base::[]=}(#t7, super.{self::Base::[]}(#t7).{self::B::-}(1){(core::int) → self::B});
    self::B v1 = let final self::Index #t8 = self::f<self::Index>() in let final self::B #t9 = self::f<self::B>() in let final void #t10 = super.{self::Base::[]=}(#t8, #t9) in #t9;
    self::B v3 = let final self::Index #t11 = self::f<self::Index>() in let final self::B #t12 = super.{self::Base::[]}(#t11).{self::B::+}(self::f<self::C>()){(self::C) → self::B} in let final void #t13 = super.{self::Base::[]=}(#t11, #t12) in #t12;
    self::B v4 = let final self::Index #t14 = self::f<self::Index>() in let final self::B #t15 = super.{self::Base::[]}(#t14).{self::B::*}(self::f<self::B>()){(self::B) → self::B} in let final void #t16 = super.{self::Base::[]=}(#t14, #t15) in #t15;
    self::C v5 = let final self::Index #t17 = self::f<self::Index>() in let final self::C #t18 = super.{self::Base::[]}(#t17).{self::B::&}(self::f<self::A>()){(self::A) → self::C} in let final void #t19 = super.{self::Base::[]=}(#t17, #t18) in #t18;
    self::B v6 = let final self::Index #t20 = self::f<self::Index>() in let final self::B #t21 = super.{self::Base::[]}(#t20).{self::B::-}(1){(core::int) → self::B} in let final void #t22 = super.{self::Base::[]=}(#t20, #t21) in #t21;
    self::B v7 = let final self::Index #t23 = self::f<self::Index>() in let final self::B #t24 = super.{self::Base::[]}(#t23) in let final void #t25 = super.{self::Base::[]=}(#t23, #t24.{self::B::-}(1){(core::int) → self::B}) in #t24;
  }
}
class Base2 extends core::Object {
  synthetic constructor •() → self::Base2
    : super core::Object::•()
    ;
  operator [](self::Index i) → self::B?
    return throw "";
  operator []=(self::Index i, self::B? v) → void {}
}
class Test2 extends self::Base2 {
  synthetic constructor •() → self::Test2
    : super self::Base2::•()
    ;
  method test() → void {
    let final self::Index #t26 = self::f<self::Index>() in super.{self::Base2::[]}(#t26) == null ?{self::B?} super.{self::Base2::[]=}(#t26, self::f<self::B?>()) : null;
    self::B? v2 = let final self::Index #t27 = self::f<self::Index>() in let final self::B? #t28 = super.{self::Base2::[]}(#t27) in #t28 == null ?{self::B?} let final self::B? #t29 = self::f<self::B?>() in let final void #t30 = super.{self::Base2::[]=}(#t27, #t29) in #t29 : #t28{self::B};
  }
}
static method f<T extends core::Object? = dynamic>() → self::f::T%
  return throw "";
static method main() → dynamic {}
