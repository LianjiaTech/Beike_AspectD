library /*isNonNullableByDefault*/;
//
// Problems in library:
//
// pkg/front_end/testcases/instantiate_to_bound/non_simple_many.dart:12:9: Error: Generic type 'A' can't be used without type arguments in a type variable bound.
// Try providing type arguments to 'A' here.
// class C<TypeZ extends Map<A, B>> {}
//         ^^^^^
// pkg/front_end/testcases/instantiate_to_bound/non_simple_many.dart:8:9: Context: Bound of this variable references variable 'TypeX' from the same declaration.
// class A<TypeX extends A<TypeX>> {}
//         ^^^^^
//
// pkg/front_end/testcases/instantiate_to_bound/non_simple_many.dart:12:9: Error: Generic type 'B' can't be used without type arguments in a type variable bound.
// Try providing type arguments to 'B' here.
// class C<TypeZ extends Map<A, B>> {}
//         ^^^^^
// pkg/front_end/testcases/instantiate_to_bound/non_simple_many.dart:10:9: Context: Bound of this variable references variable 'TypeY' from the same declaration.
// class B<TypeY extends B<TypeY>> {}
//         ^^^^^
//
// pkg/front_end/testcases/instantiate_to_bound/non_simple_many.dart:14:13: Error: Generic type 'A' can't be used without type arguments in a type variable bound.
// Try providing type arguments to 'A' here.
// extension D<TypeZ extends Map<A, B>> on int {}
//             ^^^^^
// pkg/front_end/testcases/instantiate_to_bound/non_simple_many.dart:8:9: Context: Bound of this variable references variable 'TypeX' from the same declaration.
// class A<TypeX extends A<TypeX>> {}
//         ^^^^^
//
// pkg/front_end/testcases/instantiate_to_bound/non_simple_many.dart:14:13: Error: Generic type 'B' can't be used without type arguments in a type variable bound.
// Try providing type arguments to 'B' here.
// extension D<TypeZ extends Map<A, B>> on int {}
//             ^^^^^
// pkg/front_end/testcases/instantiate_to_bound/non_simple_many.dart:10:9: Context: Bound of this variable references variable 'TypeY' from the same declaration.
// class B<TypeY extends B<TypeY>> {}
//         ^^^^^
//
// pkg/front_end/testcases/instantiate_to_bound/non_simple_many.dart:16:11: Error: Generic type 'A' can't be used without type arguments in a type variable bound.
// Try providing type arguments to 'A' here.
// typedef E<TypeZ extends Map<A, B>> = int;
//           ^^^^^
// pkg/front_end/testcases/instantiate_to_bound/non_simple_many.dart:8:9: Context: Bound of this variable references variable 'TypeX' from the same declaration.
// class A<TypeX extends A<TypeX>> {}
//         ^^^^^
//
// pkg/front_end/testcases/instantiate_to_bound/non_simple_many.dart:16:11: Error: Generic type 'B' can't be used without type arguments in a type variable bound.
// Try providing type arguments to 'B' here.
// typedef E<TypeZ extends Map<A, B>> = int;
//           ^^^^^
// pkg/front_end/testcases/instantiate_to_bound/non_simple_many.dart:10:9: Context: Bound of this variable references variable 'TypeY' from the same declaration.
// class B<TypeY extends B<TypeY>> {}
//         ^^^^^
//
import self as self;
import "dart:core" as core;

typedef E<unrelated TypeZ extends core::Map<self::A<self::A<dynamic>>, self::B<self::B<dynamic>>> = dynamic> = core::int;
class A<TypeX extends self::A<self::A::TypeX> = self::A<dynamic>> extends core::Object {
  synthetic constructor •() → self::A<self::A::TypeX>
    : super core::Object::•()
    ;
}
class B<TypeY extends self::B<self::B::TypeY> = self::B<dynamic>> extends core::Object {
  synthetic constructor •() → self::B<self::B::TypeY>
    : super core::Object::•()
    ;
}
class C<TypeZ extends core::Map<self::A<self::A<dynamic>>, self::B<self::B<dynamic>>> = dynamic> extends core::Object {
  synthetic constructor •() → self::C<self::C::TypeZ>
    : super core::Object::•()
    ;
}
extension D<TypeZ extends core::Map<self::A<self::A<dynamic>>, self::B<self::B<dynamic>>> = dynamic> on core::int {
}
static method main() → dynamic {}
static method /* from org-dartlang-sdk:///sdk/lib/_internal/vm_shared/lib/integers_patch.dart */ _#E#fromEnvironment#tearOff<unrelated TypeZ extends core::Map<self::A<self::A<dynamic>>, self::B<self::B<dynamic>>> = dynamic>(core::String name, {core::int defaultValue = #C1}) → core::int
  return core::int::fromEnvironment(name, defaultValue: defaultValue);

constants  {
  #C1 = 0
}
