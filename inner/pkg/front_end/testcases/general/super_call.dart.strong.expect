library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

class A extends core::Object {
  synthetic constructor •() → self::A
    : super core::Object::•()
    ;
  method call(core::int x) → core::int
    return x.{core::num::*}(2){(core::num) → core::int};
}
class B extends self::A {
  synthetic constructor •() → self::B
    : super self::A::•()
    ;
  method call(core::int x) → core::int
    return x.{core::num::*}(3){(core::num) → core::int};
  method call_super() → core::int {
    return super.{self::A::call}(5);
  }
}
static method main() → dynamic {
  assert(new self::B::•().{self::B::call_super}(){() → core::int} =={core::num::==}{(core::Object) → core::bool} 10);
}
