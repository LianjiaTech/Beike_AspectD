library;
//
// Problems in library:
//
// pkg/front_end/testcases/general/issue46518.dart:5:1: Error: Library doesn't support null safety.
// // @dart=2.9
// ^^^^^^^^^^^^
//
// pkg/front_end/testcases/general/issue46518.dart:16:9: Error: Constant evaluation error:
//   const CheckIdentical(optedInToken, localToken);
//         ^
// pkg/front_end/testcases/general/issue46518.dart:11:39: Context: This assertion failed.
//   const CheckIdentical(x, y) : assert(identical(x, y));
//                                       ^
//
// pkg/front_end/testcases/general/issue46518.dart:20:34: Error: Constant evaluation error:
// const testCrossLibraries = const CheckIdentical(optedInToken, optedOutToken);
//                                  ^
// pkg/front_end/testcases/general/issue46518.dart:11:39: Context: This assertion failed.
//   const CheckIdentical(x, y) : assert(identical(x, y));
//                                       ^
// pkg/front_end/testcases/general/issue46518.dart:20:7: Context: While analyzing:
// const testCrossLibraries = const CheckIdentical(optedInToken, optedOutToken);
//       ^
//
import self as self;
import "dart:core" as core;
import "issue46518_lib.dart" as iss;
import "dart:async" as asy;

import "org-dartlang-testcase:///issue46518_lib.dart";

class CheckIdentical extends core::Object /*hasConstConstructor*/  {
  const constructor •(dynamic x, dynamic y) → self::CheckIdentical*
    : assert(core::identical(x, y)), super core::Object::•()
    ;
  abstract member-signature method noSuchMethod(core::Invocation* invocation) → dynamic; -> core::Object::noSuchMethod
  abstract member-signature get _identityHashCode() → core::int*; -> core::Object::_identityHashCode
  abstract member-signature method _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*; -> core::Object::_instanceOf
  abstract member-signature method _simpleInstanceOf(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOf
  abstract member-signature method _simpleInstanceOfTrue(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOfTrue
  abstract member-signature method _simpleInstanceOfFalse(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOfFalse
  abstract member-signature operator ==(dynamic other) → core::bool*; -> core::Object::==
  abstract member-signature get hashCode() → core::int*; -> core::Object::hashCode
  abstract member-signature method toString() → core::String*; -> core::Object::toString
  abstract member-signature get runtimeType() → core::Type*; -> core::Object::runtimeType
}
static const field iss::OT<() →* asy::Future<core::int*>*>* optedOutToken = #C1;
static const field self::CheckIdentical* testCrossLibraries = invalid-expression "This assertion failed.";
static method testOptedOut() → dynamic {
  invalid-expression "This assertion failed.";
  #C2;
}
static method main() → dynamic {}

library /*isNonNullableByDefault*/;
//
// Problems in library:
//
// pkg/front_end/testcases/general/issue46518_lib.dart:21:9: Error: Constant evaluation error:
//   const CheckIdentical(optedOutToken, localToken);
//         ^
// pkg/front_end/testcases/general/issue46518.dart:11:39: Context: This assertion failed.
//   const CheckIdentical(x, y) : assert(identical(x, y));
//                                       ^
//
import self as iss;
import "dart:async" as asy;
import "dart:core" as core;
import "issue46518.dart" as self;

import "org-dartlang-testcase:///issue46518.dart";

typedef NullableIntF = () → asy::Future<core::int?>;
class OT<T extends core::Object> extends core::Object /*hasConstConstructor*/  {
  const constructor •() → iss::OT<iss::OT::T>
    : super core::Object::•()
    ;
  @#C3
  method toString() → core::String {
    return "${this.{core::Object::runtimeType}{core::Type}}";
  }
}
static const field iss::OT<() → asy::Future<core::int?>> optedInToken = #C4;
static method testOptedIn() → dynamic {
  #C2;
  invalid-expression "This assertion failed.";
}

constants  {
  #C1 = iss::OT<() →* asy::Future<core::int?>> {}
  #C2 = self::CheckIdentical {}
  #C3 = core::_Override {}
  #C4 = iss::OT<() → asy::Future<core::int?>> {}
}


Constructor coverage from constants:
org-dartlang-testcase:///issue46518.dart:
- OT. (from org-dartlang-testcase:///issue46518_lib.dart:10:9)
- Object. (from org-dartlang-sdk:///sdk/lib/core/object.dart)
- CheckIdentical. (from org-dartlang-testcase:///issue46518.dart:11:9)

org-dartlang-testcase:///issue46518_lib.dart:
- OT. (from org-dartlang-testcase:///issue46518_lib.dart:10:9)
- Object. (from org-dartlang-sdk:///sdk/lib/core/object.dart)
- CheckIdentical. (from org-dartlang-testcase:///issue46518.dart:11:9)
