library /*isNonNullableByDefault*/;
import self as self;
import "dart:core" as core;

class Class extends core::Object /*hasConstConstructor*/  {
  final field self::Class? next1;
  final field self::Class? next2;
  const constructor •([self::Class? next = #C1]) → self::Class
    : self::Class::next1 = next, self::Class::next2 = next, super core::Object::•()
    ;
}
static const field self::Class test = #C23;

constants  {
  #C1 = null
  #C2 = self::Class {next1:#C1, next2:#C1}
  #C3 = self::Class {next1:#C2, next2:#C2}
  #C4 = self::Class {next1:#C3, next2:#C3}
  #C5 = self::Class {next1:#C4, next2:#C4}
  #C6 = self::Class {next1:#C5, next2:#C5}
  #C7 = self::Class {next1:#C6, next2:#C6}
  #C8 = self::Class {next1:#C7, next2:#C7}
  #C9 = self::Class {next1:#C8, next2:#C8}
  #C10 = self::Class {next1:#C9, next2:#C9}
  #C11 = self::Class {next1:#C10, next2:#C10}
  #C12 = self::Class {next1:#C11, next2:#C11}
  #C13 = self::Class {next1:#C12, next2:#C12}
  #C14 = self::Class {next1:#C13, next2:#C13}
  #C15 = self::Class {next1:#C14, next2:#C14}
  #C16 = self::Class {next1:#C15, next2:#C15}
  #C17 = self::Class {next1:#C16, next2:#C16}
  #C18 = self::Class {next1:#C17, next2:#C17}
  #C19 = self::Class {next1:#C18, next2:#C18}
  #C20 = self::Class {next1:#C19, next2:#C19}
  #C21 = self::Class {next1:#C20, next2:#C20}
  #C22 = self::Class {next1:#C21, next2:#C21}
  #C23 = self::Class {next1:#C22, next2:#C22}
}


Constructor coverage from constants:
org-dartlang-testcase:///const_exponential_compare.dart:
- Class. (from org-dartlang-testcase:///const_exponential_compare.dart:4:9)
- Object. (from org-dartlang-sdk:///sdk/lib/core/object.dart)
