library /*isNonNullableByDefault*/;
//
// Problems in library:
//
// pkg/front_end/testcases/records/named_fields_clashing_with_positional.dart:8:15: Error: Record field names can't be a dollar sign followed by an integer when integer is the index of a positional field.
// (int, {String $1}) test4() => throw 0; // Error.
//               ^^
//
// pkg/front_end/testcases/records/named_fields_clashing_with_positional.dart:16:28: Error: Record field names can't be a dollar sign followed by an integer when integer is the index of a positional field.
// (int, double, num, {String $3}) test12() => throw 0; // Error.
//                            ^^
//
// pkg/front_end/testcases/records/named_fields_clashing_with_positional.dart:5:16: Error: Record field names can't be a dollar sign followed by an integer when integer is the index of a positional field.
// test1() => (0, $1: 0); // Error.
//                ^^
//
// pkg/front_end/testcases/records/named_fields_clashing_with_positional.dart:15:26: Error: Record field names can't be a dollar sign followed by an integer when integer is the index of a positional field.
// test11() => (10, 11, 12, $3: 13); // Error.
//                          ^^
//
import self as self;
import "dart:core" as core;

static method test1() → dynamic
  return (0, {$1: 0});
static method test2() → dynamic
  return ({$1: 0});
static method test3() → dynamic
  return (0, {$2: 1});
static method test4() → invalid-type
  return throw 0;
static method test5() → ({required $1: core::bool})
  return throw 0;
static method test6() → (core::num, {required $2: core::double})
  return throw 0;
static method test7() → (core::num, {required $01: core::double})
  return throw 0;
static method test8() → (core::num, {required $0x1: core::double})
  return throw 0;
static method test9() → (core::num, core::bool, {required $01: core::double})
  return throw 0;
static method test10() → ({required $01: core::bool, required $0x1: core::int, required $1: core::String})
  return throw 0;
static method test11() → dynamic
  return (10, 11, 12, {$3: 13});
static method test12() → invalid-type
  return throw 0;
static method main() → dynamic {}
